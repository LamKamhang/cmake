#pragma once

#ifndef __cplusplus
#  error C++ is required!
#endif

/**
 *  example:
 *  #if CPP_STANDARD >= CPP17
 *  ......sth need at least cpp17
 *  #else
 *  ......sth only works for under cpp17
 *  #endif
 **/
#define CPP_STANDARD __cplusplus
#define CPP98        199711L
#define CPP11        201103L
#define CPP14        201402L
#define CPP17        201703L
#define CPP20        202002L

/**
 * We would like to use std::string_view if it appears that the compiler will
 * support it.
 */
#if CPP_STANDARD >= CPP17
#  define GIT_META_USE_STRING_VIEW 1
#else
#  define GIT_META_USE_STRING_VIEW 0
#endif

#if GIT_META_USE_STRING_VIEW
#  include <string_view>
using StringOrView = std::string_view;
#else
#  include <string>
using StringOrView = std::string;
#endif

/**
 * @brief Here why we use namespace instead of encapsulating them in a class is
 * we allow additional to be customized in the same namespace, such as logging
 * the meta-info by hybricating these functions.
 */
// clang-format off
namespace @GIT_PROJECT_NAME@::git_meta {
  // clang-format on
  /**
   * @brief Tell whether the git information is available.
   */
  bool has_git_info();

  /**
   * @brief Tell whether there are any uncommitted changes.
   */
  bool git_is_dirty();

  /**
   * @brief Get the current commit hash.
   */
  StringOrView git_commit_hash();

  StringOrView git_commit_date();

  StringOrView git_commit_subject();

  StringOrView git_commit_body();

  StringOrView git_describe();

  StringOrView git_branch();

  // clang-format off
}
// clang-format on