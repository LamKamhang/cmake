cmake_minimum_required(VERSION 3.12)

project(require-package)

list(PREPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/../../)
include(utility)
set(DEBUG_MODE True)

function(IS_GIT)
  cmake_parse_arguments("" "" "GIT_REPOSITORY" "" ${ARGV})
  if (NOT DEFINED _GIT_REPOSITORY)
    ERROR_MSG("Failed!")
  endif()
endfunction()

function(IS_URL)
  cmake_parse_arguments("" "" "URL" "" ${ARGV})
  if (NOT DEFINED _URL)
    ERROR_MSG("Failed!")
  endif()
endfunction()

function(ASSERT_VERSION version)
  cmake_parse_arguments("" "" "VERSION" "" ${ARGN})
  ASSERT_DEFINED(_VERSION)
  ASSERT_EQUAL(${version} ${_VERSION})
endfunction()

function(ASSERT_TAG tag)
  cmake_parse_arguments("" "" "GIT_TAG" "" ${ARGN})
  ASSERT_DEFINED(_GIT_TAG)
  ASSERT_EQUAL(${tag} ${_GIT_TAG})
endfunction()

function(NO_TAG)
  cmake_parse_arguments("" "" "GIT_TAG" "" ${ARGN})
  ASSERT_NOT_DEFINED(_GIT_TAG)
endfunction()

function(NO_VERSION)
  cmake_parse_arguments("" "" "VERSION" "" ${ARGN})
  ASSERT_NOT_DEFINED(_VERSION)
endfunction()

infer_args_from_uri(out "rom:spdlog/spdlog.git")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "rom:spdlog/spdlog")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "rom:spdlog.git")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "rom:spdlog")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "rom:spdlog.git#")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "rom:spdlog#")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "rom:spdlog.git#fff")
IS_GIT(${out})
NO_VERSION(${out})
ASSERT_TAG(fff ${out})
infer_args_from_uri(out "rom:spdlog#fff")
IS_GIT(${out})
NO_VERSION(${out})
ASSERT_TAG(fff ${out})

infer_args_from_uri(out "rom:spdlog.git#v1.2")
IS_GIT(${out})
ASSERT_VERSION(1.2 ${out})
ASSERT_TAG(v1.2 ${out})
infer_args_from_uri(out "rom:spdlog#v1.2")
IS_GIT(${out})
ASSERT_VERSION(1.2 ${out})
ASSERT_TAG(v1.2 ${out})

infer_args_from_uri(out "rom:spdlog.git#v1.2@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
ASSERT_TAG(v1.2 ${out})
infer_args_from_uri(out "rom:spdlog#v1.2@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
ASSERT_TAG(v1.2 ${out})

infer_args_from_uri(out "rom:spdlog.git#@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
NO_TAG(${out})
infer_args_from_uri(out "rom:spdlog#@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
NO_TAG(${out})

infer_args_from_uri(out "rom:spdlog.git#v1df")
IS_GIT(${out})
NO_VERSION(1.1 ${out})
ASSERT_TAG(v1df ${out})
infer_args_from_uri(out "rom:spdlog#v1df")
IS_GIT(${out})
NO_VERSION(1.1 ${out})
ASSERT_TAG(v1df ${out})

# ------
infer_args_from_uri(out "gh:spdlog/spdlog.git")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "gh:spdlog/spdlog")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "gh:spdlog.git")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "gh:spdlog")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "gh:spdlog.git#")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "gh:spdlog#")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "gh:spdlog.git#fff")
IS_GIT(${out})
NO_VERSION(${out})
ASSERT_TAG(fff ${out})
infer_args_from_uri(out "gh:spdlog#fff")
IS_GIT(${out})
NO_VERSION(${out})
ASSERT_TAG(fff ${out})

infer_args_from_uri(out "gh:spdlog.git#v1.2")
IS_GIT(${out})
ASSERT_VERSION(1.2 ${out})
ASSERT_TAG(v1.2 ${out})
infer_args_from_uri(out "gh:spdlog#v1.2")
IS_GIT(${out})
ASSERT_VERSION(1.2 ${out})
ASSERT_TAG(v1.2 ${out})

infer_args_from_uri(out "gh:spdlog.git#v1.2@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
ASSERT_TAG(v1.2 ${out})
infer_args_from_uri(out "gh:spdlog#v1.2@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
ASSERT_TAG(v1.2 ${out})

infer_args_from_uri(out "gh:spdlog.git#@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
NO_TAG(${out})
infer_args_from_uri(out "gh:spdlog#@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
NO_TAG(${out})

infer_args_from_uri(out "gh:spdlog.git#v1df")
IS_GIT(${out})
NO_VERSION(1.1 ${out})
ASSERT_TAG(v1df ${out})
infer_args_from_uri(out "gh:spdlog#v1df")
IS_GIT(${out})
NO_VERSION(1.1 ${out})
ASSERT_TAG(v1df ${out})

# ------
infer_args_from_uri(out "gl:spdlog/spdlog.git")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "gl:spdlog/spdlog")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "gl:spdlog.git")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "gl:spdlog")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "gl:spdlog.git#")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})
infer_args_from_uri(out "gl:spdlog#")
IS_GIT(${out})
NO_TAG(${out})
NO_VERSION(${out})

infer_args_from_uri(out "gl:spdlog.git#fff")
IS_GIT(${out})
NO_VERSION(${out})
ASSERT_TAG(fff ${out})
infer_args_from_uri(out "gl:spdlog#fff")
IS_GIT(${out})
NO_VERSION(${out})
ASSERT_TAG(fff ${out})

infer_args_from_uri(out "gl:spdlog.git#v1.2")
IS_GIT(${out})
ASSERT_VERSION(1.2 ${out})
ASSERT_TAG(v1.2 ${out})
infer_args_from_uri(out "gl:spdlog#v1.2")
IS_GIT(${out})
ASSERT_VERSION(1.2 ${out})
ASSERT_TAG(v1.2 ${out})

infer_args_from_uri(out "gl:spdlog.git#v1.2@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
ASSERT_TAG(v1.2 ${out})
infer_args_from_uri(out "gl:spdlog#v1.2@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
ASSERT_TAG(v1.2 ${out})

infer_args_from_uri(out "gl:spdlog.git#@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
NO_TAG(${out})
infer_args_from_uri(out "gl:spdlog#@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
NO_TAG(${out})

infer_args_from_uri(out "gl:spdlog.git#v1df")
IS_GIT(${out})
NO_VERSION(1.1 ${out})
ASSERT_TAG(v1df ${out})
infer_args_from_uri(out "gl:spdlog#v1df")
IS_GIT(${out})
NO_VERSION(${out})
ASSERT_TAG(v1df ${out})

infer_args_from_uri(out "ssh://git@ryon.ren:10022/mirrors/libigl.git")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "ssh://git@ryon.ren:10022/mirrors/libigl")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})

infer_args_from_uri(out "ssh://git@ryon.ren:10022/mirrors/libigl.git#v1.2")
IS_GIT(${out})
ASSERT_VERSION(1.2 ${out})
ASSERT_TAG(v1.2 ${out})
infer_args_from_uri(out "ssh://git@ryon.ren:10022/mirrors/libigl#v1.2@1.1")
IS_GIT(${out})
ASSERT_VERSION(1.1 ${out})
ASSERT_TAG(v1.2 ${out})

infer_args_from_uri(out "git@github.com/libigl/libigl.git")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "git@github.com/libigl/libigl")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://github.com/libigl/libigl.git")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://github.com/libigl/libigl")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://github.com/libigl/libigl/zip")
IS_URL(${out})
NO_VERSION(${out})
NO_TAG(${out})

infer_args_from_uri(out "https://gitlab.com/libigl/libigl.git")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://gitlab.com/libigl/libigl")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://gitlab.com/libigl/libigl/zip")
IS_URL(${out})
NO_VERSION(${out})
NO_TAG(${out})

infer_args_from_uri(out "https://funannongwu.com/libigl/libigl.git")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://funannongwu.com/libigl/libigl")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://funannongwu.com/libigl/libigl/zip")
IS_URL(${out})
NO_VERSION(${out})
NO_TAG(${out})

infer_args_from_uri(out "https://ryon.ren:2443/libigl/libigl.git")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://ryon.ren:2443/libigl/libigl")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "https://ryon.ren:2443/libigl/libigl/zip")
IS_URL(${out})
NO_VERSION(${out})
NO_TAG(${out})

infer_args_from_uri(out "https://ryonxren:2443/libigl/libigl")
IS_URL(${out})
NO_VERSION(${out})
NO_TAG(${out})

infer_args_from_uri(out "ssh://github.com/libigl/libigl")
IS_URL(${out})
NO_VERSION(${out})
NO_TAG(${out})

infer_args_from_uri(out "git@github.com/libigl/libigl.git")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})
infer_args_from_uri(out "git@github.com/libigl/libigl")
IS_GIT(${out})
NO_VERSION(${out})
NO_TAG(${out})

# infer_args_from_uri(out "ssh://git@ryon.ren:10022/mirrors/libigl.git")
# infer_args_from_uri(out "git@github.com/libigl/libigl.git")
# infer_args_from_uri(out "git@github.com/libigl/libigl")
# infer_args_from_uri(out "https://github.com/libigl/libigl.git")
# infer_args_from_uri(out "https://gitlab.com/libeigen/eigen3.git")
# infer_args_from_uri(out "https://github.com/libigl/libigl")
# infer_args_from_uri(out "https://gitlab.com/libeigen/eigen3")

# # infer_args_from_uri(out "gl:spdlog/spdlog#v1.2@1.0")
# # infer_args_from_uri(out "gl:Catch2#v1.9")
# # infer_args_from_uri(out "gl:spdlog/spdlog#v1.2@1.0")
# # infer_args_from_uri(out "gl:spdlog/spdlog#v1.2")
# # infer_args_from_uri(out "gl:spdlog/spdlog#@1.0")
# # infer_args_from_uri(out "gl:spdlog/spdlog#asdfab")
# # infer_args_from_uri(out "gl:spdlog/spdlog#1dfa")
# # infer_args_from_uri(out "ssh://git@ryon.ren:10022/mirrors/libigl.git")
# # infer_args_from_uri(out "git@github.com:osqp/osqp.git")
# # infer_args_from_uri(out "https://github.com/Yixin-Hu/TetWild.git")
# # infer_args_from_uri(out "https://github.com/CPPAlliance/url/archive/refs/tags/static-pool.zip")
# # infer_args_from_uri(out "https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh")
# infer_args_from_uri(spdlog "gl:spdlog/spdlog#v1.2@")
# infer_args_from_uri(spdlog "gl:spdlog/spdlog#v1.2")
