cmake_minimum_required(VERSION 3.12)

project(require-package)

list(PREPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/../../)
include(utility)
set(DEBUG_MODE True)

DEBUG_MSG("Echo Debug")
set(GOOD "")

ASSERT_DEFINED(GOOD)
ASSERT_EMPTY(${GOOD})

set(GOOD)
ASSERT_NOT_DEFINED(GOOD)
ASSERT_EMPTY(${GOOD})
function(test url)
  if (${url} MATCHES "^https://github.com/[^/ ]+/[^/ ]+$")
    DEBUG_MSG("MATCHED: ${url}: ${CMAKE_MATCH_0}")
  endif()
endfunction()
test("https://github.com/good/good/good")

# for equal.
function(check_equal)
  # for number.
  ASSERT_EQUAL(10 10)
  set(v1 10)
  ASSERT_EQUAL(${v1} 10)
  ASSERT_NOT_EQUAL(${v1} 11)
  ASSERT_NOT_EQUAL(v1 10)
  # for string.
  set(v2 hello)
  ASSERT_EQUAL(${v2} "hello")
  ASSERT_NOT_EQUAL(${v2} "hello2")
  ASSERT_NOT_EQUAL(v2 "hello")
endfunction()
check_equal()

function(check_less_greater)
  ASSERT_LESS(7 8)
  ASSERT_NOT_LESS(8 7)
  ASSERT_NOT_LESS(7 7)
  ASSERT_GREATER(8 7)
  ASSERT_NOT_GREATER(7 8)
  ASSERT_NOT_GREATER(7 7)
  ASSERT_LESS_EQUAL(7 7)
  ASSERT_LESS_EQUAL(7 8)
  ASSERT_GREATER_EQUAL(7 7)
  ASSERT_GREATER_EQUAL(8 7)
  ASSERT_NOT_LESS_EQUAL(8 7)
  ASSERT_NOT_GREATER_EQUAL(7 8)
endfunction()
check_less_greater()

function(check_empty_defined)
  ASSERT_EMPTY(${hello})
  ASSERT_NOT_DEFINED(hello)
  # !ASSERT_DEFINED(hello)

  set(v1 ${hello}) # since hello is undefined, thus this is identical to unset.
  ASSERT_EMPTY(${v1})
  ASSERT_NOT_DEFINED(hello)
  # !ASSERT_DEFINED(hello)

  set(v2 "")
  ASSERT_EMPTY(${v2})
  ASSERT_DEFINED(v2)
  # !ASSERT_NOT_DEFINED(v2)

  set(v3 ${v2}) # since v2 is empty. thus this is identical to unset.
  ASSERT_EMPTY(${v3})
  # !ASSERT_DEFINED(v3)
  ASSERT_NOT_DEFINED(v3)
endfunction()
check_empty_defined()

function(check_bool)
  ASSERT_TRUTHY(ON)
  ASSERT_TRUTHY(TRUE)
  ASSERT_TRUTHY(1)
  ASSERT_TRUTHY(YES)
  ASSERT_TRUTHY(Y)
  # !ASSERT_TRUTHY(OFF)
  # !ASSERT_TRUTHY(IGNORE)
  # !ASSERT_TRUTHY(NOTFOUND)
  # !ASSERT_TRUTHY(NO)
  # !ASSERT_TRUTHY(N)
  ASSERT_FALSY(IGNORE)
  ASSERT_FALSY(NOTFOUND)
  ASSERT_FALSY(NO)
  ASSERT_FALSY(N)
  ASSERT_FALSY(OFF)
  ASSERT_FALSY(0)
  # !ASSERT_FALSY(ON)
  # !ASSERT_FALSY(TRUE)
  # !ASSERT_FALSY(1)
  # !ASSERT_FALSY(YES)
  # !ASSERT_FALSY(Y)
  # with variable.
  foreach(val ON TRUE 1 YES Y)
    ASSERT_TRUTHY(val)
    ASSERT_TRUTHY(${val})
    # !ASSERT_FALSY(val)
    # !ASSERT_FALSY(${val})
  endforeach()
  foreach(val OFF FALSE 0 NO N)
    # !ASSERT_TRUTHY(val)
    # !ASSERT_TRUTHY(${val})
    ASSERT_FALSY(val)
    ASSERT_FALSY(${val})
  endforeach()
endfunction()
check_bool()

function(check_exists)
  ASSERT_EXISTS(build-release ${CMAKE_CURRENT_LIST_DIR} ${CMAKE_CURRENT_LIST_FILE})
  ASSERT_NOT_EXISTS(buildnot-exist)
  ASSERT_PATH_EXISTS(build-release ${CMAKE_CURRENT_LIST_DIR})
  ASSERT_FILE_EXISTS(${CMAKE_CURRENT_LIST_FILE})
endfunction()
check_exists()
